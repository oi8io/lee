func firstMissingPositive(nums []int) int {
	var bin = make(map[int]uint64)
	var indexs = make([]int, 0)
	var m uint64 = math.MaxUint64
	for i := 0; i < len(nums); i++ {
		if nums[i] < 0 {
			continue
		}
		idx := nums[i] / 64
		if _, ok := bin[idx]; !ok {
			indexs = append(indexs, idx)
		}
		bin[idx] = bin[idx] | 1<<(nums[i]%64)
	}
	if len(indexs) == 0 {
		return 1
	}
	sort.Ints(indexs)
	for i, index := range indexs {
		if bin[index] == m {
			continue
		}
		j := 0
		if i == 0 {
			j = 1
		}
		for ; j < 64; j++ {
			if 1<<j&bin[index] == 0 {
				return i*64 + j
			}
		}
	}
	return len(indexs)*64 + 1
}


//total_testcases:173
//total_correct:172
//input_formatted:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127]
//expected_output:128
//code_output:129
